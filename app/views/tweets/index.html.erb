<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
	"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
	<title>index.html</title>
	  <style type="text/css" media="screen">
	   *{
       font-family: "Eigerdals black","Arial Rounded MT Bold","Trebuchet MS",Trebuchet,sans-serif;
  	   background: #eee;
  
	   }
	   .text{
       font-size: 10px;	     
	   }
	   .left{
	     width:200px;
       float:left;
     }
     .main{
       float:right;
     }
     ul{
       list-style-type: none;
       padding-left:0px;
     }
     li{
       border-bottom:0.1px;
       border-style:dotted;
       color: #CCC;
     }
	   
	  </style>
	  <%= javascript_include_tag("raphael-min.js", "g.raphael-min.js", "g.line-min.js")%>
	  <script src="http://js.pusherapp.com/1.7/pusher.min.js" type="text/javascript"></script>
	  <script src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.5.1.min.js" type="text/javascript"></script>
    <script type="text/javascript">
      // Enable pusher logging - don't include this in production
      // Pusher.log = function() {
      //   if (window.console) window.console.log.apply(window.console, arguments);
      // };
      // 
      // Flash fallback logging - don't include this in production
      WEB_SOCKET_DEBUG = true;
      function updateTPM () {
        var tpm = counter * 6;
        $("#tpm").text(tpm);
        // console.log(tpm);
        counter = 0;
      }
      function updateGraph(){
        var tpm = summary;
        // console.log(tpm);
        line_numbers.push(tpm);
        line_numbers.shift();
        var date = new Date;
        var date_string = formatTime(date);
        line_dates.push(date_string);        
        line_dates.shift();
        draw();
        summary = 0;
      }
      
      function updateTime () {
        var d = new Date()
        $("#localtime").text(formatTime(d))
        $("#austintime").text(formatTime(calcTime(d, '-5')))
      }
      
      function formatTime (date) {
        return date.getFullYear() + "/" + (date.getMonth() + 1) + "/" + date.getDate() + " " + date.getHours() + ":" + date.getMinutes();
      }
      // From http://tek.io/fvqWRw 
      function calcTime(d, offset) {
          // create Date object for current location
          // convert to msec
          // add local time zone offset 
          // get UTC time in msec
          utc = d.getTime() + (d.getTimezoneOffset() * 60000);

          // create new Date object for different city
          // using supplied offset
          nd = new Date(utc + (3600000*offset));
          // return time as a string
          return nd;
      }
      
      var pusher = new Pusher('1ae96b4c472db6c039f1');
      var channel = pusher.subscribe('twitter');
      var counter = 0;
      var summary = 0;
      var tweets = [];
      channel.bind('created', function(data) {
        // data.some.user.profile_image_url;
        counter++;
        summary++;
        tweets.push("<li>" + data.some.text +"</li>");
        if (tweets.length > 5) {
          tweets.shift();
        };
        $('#tweets ul').html(tweets.join());
      });
      setInterval("updateTime()", 6000);
      setInterval("updateTPM()", 10000);
      setInterval("updateGraph()", 60000);
    </script>
	  
    <script type="text/javascript">
        var processingMap = function(value, istart, istop, ostart, ostop) {
          return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
        };
        
        var line_numbers = <%= raw Tweet.numbers %>;
        
        // var line_numbers = [3, 126, 97, 174, 134, 161, 124, 106, 107, 99, 104, 128, 137, 85, 125, 132, 143, 133, 120, 121, 108, 110, 118, 103, 124, 119, 113, 115, 115, 106, 110, 110, 148, 129, 121, 110, 124, 86, 109, 72, 85, 83, 99, 87, 76, 89, 69, 91, 87, 85, 97, 75, 83, 84, 9, 91, 97, 109, 78, 76, 89, 98, 2, 3, 1, 4, 0, 0, 1, 1, 4, 0, 3, 1, 2, 2, 0, 2, 2, 0, 1, 0, 2, 2, 0, 3, 0, 0, 2, 3, 0, 0, 5, 0, 1, 0, 4, 3, 1, 4, 0, 2, 1, 1, 3, 0, 1, 2, 1, 0, 4, 0, 0, 1, 0, 4, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 1, 0, 4, 2, 5, 4, 0, 3, 4, 3, 2, 1, 0, 1, 6, 3, 2, 0, 9, 1]
        var blue = "hsb(0.6, 1, 0.75)";
        var green = "hsb(0.5, 0.25, 1)";
        
        var x_values = [];
        var line_dates = <%= raw Tweet.dates%>
        // var line_dates = ["2011/3/14 22:25", "2011/3/14 22:26", "2011/3/14 22:27", "2011/3/14 22:28", "2011/3/14 22:29", "2011/3/14 22:30", "2011/3/14 22:31", "2011/3/14 22:32", "2011/3/14 22:33", "2011/3/14 22:34", "2011/3/14 22:35", "2011/3/14 22:36", "2011/3/14 22:37", "2011/3/14 22:38", "2011/3/14 22:39", "2011/3/14 22:40", "2011/3/14 22:41", "2011/3/14 22:42", "2011/3/14 22:43", "2011/3/14 22:44", "2011/3/14 22:45", "2011/3/14 22:46", "2011/3/14 22:47", "2011/3/14 22:48", "2011/3/14 22:49", "2011/3/14 22:50", "2011/3/14 22:51", "2011/3/14 22:52", "2011/3/14 22:53", "2011/3/14 22:54", "2011/3/14 22:55", "2011/3/14 22:56", "2011/3/14 22:57", "2011/3/14 22:58", "2011/3/14 22:59", "2011/3/14 23:0", "2011/3/14 23:1", "2011/3/14 23:10", "2011/3/14 23:11", "2011/3/14 23:12", "2011/3/14 23:13", "2011/3/14 23:14", "2011/3/14 23:15", "2011/3/14 23:16", "2011/3/14 23:17", "2011/3/14 23:18", "2011/3/14 23:19", "2011/3/14 23:2", "2011/3/14 23:20", "2011/3/14 23:21", "2011/3/14 23:22", "2011/3/14 23:23", "2011/3/14 23:24", "2011/3/14 23:25", "2011/3/14 23:26", "2011/3/14 23:3", "2011/3/14 23:4", "2011/3/14 23:5", "2011/3/14 23:6", "2011/3/14 23:7", "2011/3/14 23:8", "2011/3/14 23:9", "2011/3/15 23:50", "2011/3/15 23:50", "2011/3/15 23:50", "2011/3/15 23:50", "2011/3/15 23:50", "2011/3/15 23:50", "2011/3/15 23:50", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51", "2011/3/15 23:51"]
        var date_axis = [] 
        
        var width = 800;
        var height = 180;
        var divider = width / 6
        
        // console.log(line_dates);
        // console.log(line_numbers);
        // console.log(x_values);
        var draw = function(){
          $("#graph").empty();
          var r = Raphael(document.getElementById("graph"), width, height);


          for (var i=1; i < line_numbers.length + 1; i++) {
            date = new Date(line_dates[i]);
            if ((date.getMinutes() % 10) == 0) {
              date_axis.push({x:i, date:date})
            };
            x_values.push(i);
          };


          // Draws line seperator and time
          for (var i=1; i < date_axis.length; i++) {
            var divider_x = i * divider;
            var divider_date = date_axis[i].date;
            r.path("M" + divider_x + " 0" + "L" + divider_x + " " + (height - 20) ).attr({stroke:"hsb(0.5, 0.25, 1)"});
            r.text(divider_x, height - 10, divider_date.getHours() + ":" + divider_date.getMinutes());
          };
          
          var mentioned = <%= raw @mentions_summary.to_json %>;
          // Creates a simple line chart at 10, 10
          // width 300, height 220
          // x-values: [1,2,3,4,5], y-values: [10,20,15,35,30]
          var linec = r.g.linechart(100,10,width,150,x_values,line_numbers, { "symbol":"o", "colors":["cornflowerblue"]});
          var figure = null;
          linec.hover(function() {
            h = this;
            figure = r.text(this.x , this.y, this.value);
            this.symbol.attr({'fill':'white'});
          }, function() {
            figure.remove();
            this.symbol.attr({'fill':'cornflowerblue'});
          });
          // var rr = Raphael(document.getElementById("bubble"), width, height);
          // var space = width * 0.9 / mentioned.length;
          // for (var i=0; i < mentioned.length; i++) {
          //   var m = mentioned[i]
          //   if (m[2]) {
          //     var color = green;
          //   }else{
          //     var color = blue;
          //   };
          //   var mark_size = processingMap(m[1], 25,111 , 5, 20)
          //   var mark_x = 50 + (i * space);
          //   var mark_y = Math.floor(Math.random()*(height * 0.9));
          //   cc = rr.circle(mark_x, mark_y, mark_size).attr({
          //       fill: color,
          //       stroke: "hsb(0.5, 0.25, 1)"
          //   });
          //   if (m[2]) {
          //     var href = JSON.parse(m[2].schedule.content).href;
          //     cc.attr({href:href})
          //   };
          //   if (mark_size > 3) {
          //     tt = rr.text(mark_x,mark_y,  m[0]);
          //   };
          // };
        }
        
        window.onload = function() {
          draw();
        }
    </script>
</head>

<body>
  <h2>#SXSW Tweets
    <!--img src="images/sxswbubbly_logo.png" width="100" height="30" -->
    at <span id="localtime"><%= @tweets.last.tweeted_at.getlocal.strftime("%Y/%m/%d %H:%S") %></span>
  (
  <span id="austintime">
    <%= @tweets.last.tweeted_at.in_time_zone("Central Time (US & Canada)").strftime("%Y/%m/%d %H:%S") %>
  </span>
    in Austin, TX
  )
  </h2>
  <div class="container">
    <div class="left" class="box column"  style="border:1px dashed #CCC;">
      <div style="width:200px;height:25px">
        Tweets Per Minute:<span id="tpm"><%= @tpm %></span>
      </div>
      <div id="tweets" class="text" style="border:1px dashed #CCC;">
        <ul>
        </ul>
      </div>
    </div>
    <div class="main" class="box column">
      <div id="bubble" style="border:1px dashed #CCC;"></div>
      <div id="graph" style="width:800px;height:180px;border:1px dashed #CCC;"></div>
    </div>
  </div>
</body>
</html>
